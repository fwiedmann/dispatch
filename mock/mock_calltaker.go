// Code generated by MockGen. DO NOT EDIT.
// Source: calltaker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dispatch "github.com/fwiedmann/dispatch"
	code "github.com/fwiedmann/dispatch/pkg/code"
	gomock "github.com/golang/mock/gomock"
)

// Mockanalyzer is a mock of analyzer interface.
type Mockanalyzer struct {
	ctrl     *gomock.Controller
	recorder *MockanalyzerMockRecorder
}

// MockanalyzerMockRecorder is the mock recorder for Mockanalyzer.
type MockanalyzerMockRecorder struct {
	mock *Mockanalyzer
}

// NewMockanalyzer creates a new mock instance.
func NewMockanalyzer(ctrl *gomock.Controller) *Mockanalyzer {
	mock := &Mockanalyzer{ctrl: ctrl}
	mock.recorder = &MockanalyzerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockanalyzer) EXPECT() *MockanalyzerMockRecorder {
	return m.recorder
}

// Analyze mocks base method.
func (m *Mockanalyzer) Analyze() ([]code.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Analyze")
	ret0, _ := ret[0].([]code.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Analyze indicates an expected call of Analyze.
func (mr *MockanalyzerMockRecorder) Analyze() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Analyze", reflect.TypeOf((*Mockanalyzer)(nil).Analyze))
}

// Mockdispatcher is a mock of dispatcher interface.
type Mockdispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockdispatcherMockRecorder
}

// MockdispatcherMockRecorder is the mock recorder for Mockdispatcher.
type MockdispatcherMockRecorder struct {
	mock *Mockdispatcher
}

// NewMockdispatcher creates a new mock instance.
func NewMockdispatcher(ctrl *gomock.Controller) *Mockdispatcher {
	mock := &Mockdispatcher{ctrl: ctrl}
	mock.recorder = &MockdispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdispatcher) EXPECT() *MockdispatcherMockRecorder {
	return m.recorder
}

// Dispatch mocks base method.
func (m *Mockdispatcher) Dispatch(arg0 []dispatch.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockdispatcherMockRecorder) Dispatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*Mockdispatcher)(nil).Dispatch), arg0)
}
